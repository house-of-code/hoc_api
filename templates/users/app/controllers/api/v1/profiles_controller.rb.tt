class Api::V1::ProfilesController < Api::V1::ApiController
  skip_before_action :authenticate_request, only: [:create]
  def create
    if User.where(email: params[:email]).count > 0
      render_error("User exists", :conflict) and return
    end
    @current_user = User.new(user_params)
    if @current_user.save
      @authentication_token = @current_user.authentication_token
      render_result({authentication_token: @authentication_token, profile: @current_user.as_api_response(:basic) }, :created)
    else
      render_error(@current_user.errors.full_messages.first)
    end
  end

  # GET /api/v1/profile/
  def show
    render_result(profile: @current_user.as_api_response(:basic))
  end

  # PATCH /api/v1/profile/
  def update
    if @current_user.update(user_params)
      render_result(profile: @current_user.as_api_response(:basic))
    else
      render_error(@current_user.errors.full_messages.first)
    end
  end

  # DELETE /api/v1/profile
  def destroy
    if @current_user.destroy
      render_nothing(:deleted)
    else
      render_error(@current_user.errors.full_messages.first)
    end
  end

  # POST /api/v1/profile/add_device
  def add_device
    if @current_user.add_device(device_params)
      render_nothing
    else
      render_error(@current_user.errors.full_messages.first)
    end
  end

  <% if enable_user_avatar? -%>
  # POST /api/v1/profile/set_avatar
  def set_avatar
    if @current_user.update!(avatar_contents: user_params[:avatar_contents], avatar_name: user_params[:avatar_name])
      render_nothing
    else
      render_error(@current_user.errors.full_messages.first)
    end
  end
  <% end -%>
  
  private

  def user_params
    params.require(:profile).permit(:email, :name, :password, :password_confirmation, <%= (user_field_names.join(", ") + ", ") unless user_field_names.nil? -%> <%= " :avatar_contents, :avatar_name" if enable_user_avatar? -%> )
  end

  def device_params
    params.require(:device).permit(:token, :platform, :platform_version, :push_environment)
  end
end
