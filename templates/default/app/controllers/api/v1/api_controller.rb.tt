class Api::V1::ApiController < ActionController::API
  # includes
  include ActsAsApi::Rendering
  include Orderable
  <% if enable_pundit? -%>
  include Pundit
  <% end -%>

  # before_actions
  <% if install_user? -%>
  before_action :authenticate_request
  <% end -%>

  # rescues
  rescue_from ActiveRecord::RecordNotFound, :with => :record_not_found

  # attrs
  <% if install_user? -%>
  attr_reader :current_user
  <% end -%>
  # methods
  def render_result(json, status = :ok)
    render json: json, status: status
  end

  def render_collection(scope, name = :collection, render_key = :basic, default_per_page = 20)
    if params.has_key :all
      collection = scope
      result = {
        meta: {
          current:  1,
          previous: nil,
          next:     nil,
          per_page: collection.count,
          pages:    1,
          count:    collection.count
        }
      }
      result[name] = collection.as_api_response(render_key)
      render_result(result)
    else
      render_result(paginate(scope, name, render_key, default_per_page))
    end
  end

  def render_nothing(status = :ok)
    render json: {}, status: status
  end

  def render_not_authorized
    render_error("Not Authorized", 401)
  end

  def render_not_allowed
    render_error("Not allowed", :unauthorized)
  end

  def render_error(err, status = :unprocessable_entity)
    render json: { status: status, error: err }, status: status
  end

  def paginate(scope, name = :collection, render_key = :basic, default_per_page = 20)
    collection = scope.page(params[:page]).per((params[:per_page] || default_per_page).to_i)

    current, total, per_page = collection.current_page, collection.num_pages, collection.limit_value
    result = {
      meta: {
        current:  current,
        previous: (current > 1 ? (current - 1) : nil),
        next:     (current == total ? nil : (current + 1)),
        per_page: per_page,
        pages:    total,
        count:    collection.total_count
      },
    }
    result[name] = collection.as_api_response(render_key)
    return result
  end

  <% if install_user? -%>
  def authenticate_request
    @current_user = User.authenticate_with_http_headers(request.headers)
    render_not_authorized unless @current_user
  end
  <% end -%>
end
